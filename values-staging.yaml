# Staging environment values
environment: staging

# Tool Server Configuration
toolServer:
  replicaCount: 2

  image:
    repository: 283174975792.dkr.ecr.us-west-2.amazonaws.com/summitlabs/tool-server
    pullPolicy: Always  # For AWS ECR
    tag: "latest"

  service:
    type: ClusterIP
    port: 8000

  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    hosts:
      - host: tool-server.staging.local
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: tool-server-staging-tls
        hosts:
          - tool-server.staging.local

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  autoscaling:
    enabled: false

  podAnnotations: {}

  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false

  livenessProbe:
    enabled: true
    path: /health
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  readinessProbe:
    enabled: true
    path: /health  # Use /health instead of /ready
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

  env:
  # APP_SECRET not needed when DISABLE_AUTH=true
  - name: TAVILY_API_KEY
    value: "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"
  - name: DISABLE_AUTH
    value: "true"
  # - name: LOG_LEVEL
  #   value: "debug"

  nodeSelector: {}
  tolerations: []
  affinity: {}

# LangConnect Configuration
langconnect:
  replicaCount: 1

  image:
    repository: 283174975792.dkr.ecr.us-west-2.amazonaws.com/summitlabs/langconnect
    pullPolicy: Always  # For AWS ECR
    tag: "latest"

  service:
    type: ClusterIP  # Internal only - not exposed externally
    port: 8080

  resources:
    limits:
      cpu: 500m
      memory: 512Mi  # Increased from 256Mi due to OOMKilled
    requests:
      cpu: 100m
      memory: 256Mi  # Increased from 128Mi

  autoscaling:
    enabled: false

  podAnnotations: {}

  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false

  livenessProbe:
    enabled: true
    path: /health
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  readinessProbe:
    enabled: true
    path: /health  # Use /health instead of /ready
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

  env:
  - name: ALLOW_ORIGINS
    value: '["*"]'  # Allow all origins for staging; restrict in production
  - name: SUPABASE_URL
    value: "http://host.docker.internal:54321"
  - name: SUPABASE_KEY
    value: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU"
  # - name: LOG_LEVEL
  #   value: "debug"

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Web Frontend Configuration
web:
  replicaCount: 2

  image:
    repository: 283174975792.dkr.ecr.us-west-2.amazonaws.com/summitlabs/web
    pullPolicy: Always  # For AWS ECR
    tag: "latest"

  containerPort: 3000

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    hosts:
      - host: web.staging.local
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: web-staging-tls
        hosts:
          - web.staging.local

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  autoscaling:
    enabled: false

  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false

  livenessProbe:
    enabled: true
    path: /
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  readinessProbe:
    enabled: true
    path: /
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

  env:
  - name: NEXT_PUBLIC_API_URL
    value: "http://tool-server.staging.local"
  # - name: NODE_ENV
  #   value: "development"

  nodeSelector: {}
  tolerations: []
  affinity: {}

# PostgreSQL Configuration (for langconnect)
postgres:
  image:
    repository: pgvector/pgvector
    tag: pg16
    pullPolicy: IfNotPresent

  auth:
    username: postgres
    password: postgres-staging  # Change in production!
    database: postgres

  persistence:
    enabled: false  # Using emptyDir for staging (data will be lost on restart)

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  podSecurityContext:
    fsGroup: 999

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 999

  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
