# Default values for summitlabs.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Tool Server Configuration
toolServer:
  replicaCount: 1

  image:
    repository: 283174975792.dkr.ecr.us-west-2.amazonaws.com/summitlabs/tool-server
    pullPolicy: IfNotPresent
    tag: "latest"

  service:
    type: ClusterIP
    port: 8000

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: Prefix
    tls: []

  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # requests:
    #   cpu: 250m
    #   memory: 256Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  livenessProbe:
    enabled: false
    path: /
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  readinessProbe:
    enabled: false
    path: /
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

  env: []

  nodeSelector: {}
  tolerations: []
  affinity: {}

# LangConnect Configuration
langconnect:
  replicaCount: 1

  image:
    repository: 283174975792.dkr.ecr.us-west-2.amazonaws.com/summitlabs/langconnect
    pullPolicy: IfNotPresent
    tag: "latest"

  service:
    type: ClusterIP
    port: 8080

  resources: {}
    # limits:
    #   cpu: 250m
    #   memory: 256Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 6
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  livenessProbe:
    enabled: false
    path: /
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  readinessProbe:
    enabled: false
    path: /
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

  env: []

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Web Frontend Configuration
web:
  replicaCount: 1

  image:
    repository: 283174975792.dkr.ecr.us-west-2.amazonaws.com/summitlabs/web
    pullPolicy: IfNotPresent
    tag: "latest"

  containerPort: 3000

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: Prefix
    tls: []

  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # requests:
    #   cpu: 250m
    #   memory: 256Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  livenessProbe:
    enabled: false
    path: /
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  readinessProbe:
    enabled: false
    path: /
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

  env: []

  nodeSelector: {}
  tolerations: []
  affinity: {}

# PostgreSQL Configuration (for langconnect)
postgres:
  image:
    repository: pgvector/pgvector
    tag: pg16
    pullPolicy: IfNotPresent

  auth:
    username: postgres
    password: postgres  # Change this in production!
    database: postgres

  service:
    type: ClusterIP
    port: 5432

  persistence:
    enabled: false  # Enable for production
    storageClass: ""  # Use default storage class
    accessMode: ReadWriteOnce
    size: 8Gi

  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # requests:
    #   cpu: 250m
    #   memory: 256Mi

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 999

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: false
    # runAsNonRoot: true
    # runAsUser: 999

  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

  env: []

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Service Account
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}
podLabels: {}
